#!/usr/bin/env node

/**
 * Module dependencies.
 */

var httpServer = require('../http');
var http = require('http');
var config = require('../config');
var debug = require('debug')('WoChat-Server:http');
var mongooseDebug = require('debug')('WoChat-Server:db');
var SocketServer = require('../socket');
var mongoose = require('mongoose');

// Use ES6 Promises in Mongoose.
mongoose.Promise = Promise;

// Connect to mongodb
mongoose.connect(config.dbpath);
mongoose.connection.on('error', console.error.bind(console, 'MongoDB connection error:'));
mongoose.connection.once('open', mongooseDebug.bind(mongooseDebug, 'MongoDB connected successfully!'));

/**
 * Get httpPort from environment and store in Express.
 */

var httpPort = normalizePort(process.env.WOCHAT_HTTP_PORT || '3000');

httpServer.set('port', httpPort);

/**
 * Create HTTP server.
 */

var server = http.createServer(httpServer);

/**
 * Listen on provided httpPort, on all network interfaces.
 */

server.listen(httpPort);
server.on('error', onError);
server.on('listening', onListening);

var socketPort = normalizePort(process.env.WOCHAT_SOCKET_PORT || '3001');

SocketServer.createServer(socketPort);

/**
 * Normalize a httpPort into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // httpPort number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof httpPort === 'string'
        ? 'Pipe ' + httpPort
        : 'Port ' + httpPort;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'httpPort ' + addr.port;
    debug('Listening on ' + bind);
    if (process && process.send) {
        process.send('ready');
    }
}
